#!/usr/bin/env node

/**
 * Module dependencies.
 */
let pathUrl = "";
switch (process.env.NODE_ENV) {
  case "development":
    pathUrl = "dev.env"
    break;
  case "development-docker":
    pathUrl = "dev-docker.env"
    break;
  default:
    pathUrl = "prod.env"
    break;
}
const path = require('path');
require('dotenv').config({
  path: path.resolve(__dirname, "../env",pathUrl)
});

const env = require('../env/');
const broker = require("../src/broker");
const server = require("../src/server");
const debug = require('debug')('thingyota-mqtt-broker:server');
const ws = require('websocket-stream')


ws.createServer({ server: server }, broker.handle)

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(env.sever.port || '3000');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  var addr = server.address();
  console.info(`Broker run in ${addr.address}::${addr.port}`)
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, onListening);
server.on('error', onError);
